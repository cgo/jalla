{-# LANGUAGE ForeignFunctionInterface #-}

module BLAS.Foreign.LAPACKE
       --(CblasOrder (..),
       -- CblasTranspose (..),
       -- CblasUplo (..),
       -- CblasDiag (..),
       -- CblasSide (..),
       -- CblasIndex)
       where

import C2HS
import Foreign.C.Types
import Foreign.Ptr
import Math.Types
import Data.Complex

#define LAPACK_NAME_PATTERN_LC 1
#define LAPACK_COMPLEX_STRUCTURE 1

#include <lapacke_config.h>
#include <lapacke.h>
#include <lapacke_utils.h>

castComplexToPtr :: Ptr (Complex CFloat) -> Ptr a 
castComplexToPtr = castPtr

castZomplexToPtr :: Ptr (Complex CDouble) -> Ptr a
castZomplexToPtr = castPtr

{# fun unsafe lapacke_sgbequ as sgbequ {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgbequ as dgbequ {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgbequ as cgbequ {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgbequ as zgbequ {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgbequb as sgbequb {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgbequb as dgbequb {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgbequb as cgbequb {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgbequb as zgbequb {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgbsv as sgbsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt', id `Ptr CFloat', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgbsv as dgbsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt', id `Ptr CDouble', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgbsv as cgbsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgbsv as zgbsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgbtrf as sgbtrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgbtrf as dgbtrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgbtrf as cgbtrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgbtrf as zgbtrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgebrd as sgebrd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgebrd as dgebrd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgebrd as cgebrd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgebrd as zgebrd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgeequ as sgeequ {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgeequ as dgeequ {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgeequ as cgeequ {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgeequ as zgeequ {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgeequb as sgeequb {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgeequb as dgeequb {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgeequb as cgeequb {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgeequb as zgeequb {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgehrd as sgehrd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgehrd as dgehrd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgehrd as cgehrd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgehrd as zgehrd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgelqf as sgelqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgelqf as dgelqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgelqf as cgelqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgelqf as zgelqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgelsd as sgelsd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `CFloat', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgelsd as dgelsd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `CDouble', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgelsd as cgelsd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CFloat', id `CFloat', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgelsd as zgelsd {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CDouble', id `CDouble', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgelss as sgelss {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `CFloat', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgelss as dgelss {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `CDouble', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgelss as cgelss {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CFloat', id `CFloat', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgelss as zgelss {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CDouble', id `CDouble', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgelsy as sgelsy {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt', id `CFloat', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgelsy as dgelsy {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt', id `CDouble', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgelsy as cgelsy {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt', id `CFloat', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgelsy as zgelsy {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt', id `CDouble', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgeqlf as sgeqlf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgeqlf as dgeqlf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgeqlf as cgeqlf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgeqlf as zgeqlf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgeqp3 as sgeqp3 {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgeqp3 as dgeqp3 {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgeqp3 as cgeqp3 {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgeqp3 as zgeqp3 {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgeqpf as sgeqpf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgeqpf as dgeqpf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgeqpf as cgeqpf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgeqpf as zgeqpf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgeqrf as sgeqrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgeqrf as dgeqrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgeqrf as cgeqrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgeqrf as zgeqrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
--{# fun unsafe lapacke_sgeqrfp as sgeqrfp {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
--{# fun unsafe lapacke_dgeqrfp as dgeqrfp {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
--{# fun unsafe lapacke_cgeqrfp as cgeqrfp {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
--{# fun unsafe lapacke_zgeqrfp as zgeqrfp {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgerqf as sgerqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgerqf as dgerqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgerqf as cgerqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgerqf as zgerqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgesv as sgesv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt', id `Ptr CFloat', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgesv as dgesv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt', id `Ptr CDouble', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgesv as cgesv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgesv as zgesv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgetrf as sgetrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgetrf as dgetrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgetrf as cgetrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgetrf as zgetrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgetri as sgetri {fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgetri as dgetri {fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgetri as cgetri {fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgetri as zgetri {fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sggglm as sggglm {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dggglm as dggglm {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cggglm as cggglm {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zggglm as zggglm {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgglse as sgglse {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgglse as dgglse {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgglse as cgglse {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgglse as zgglse {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sggqrf as sggqrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dggqrf as dggqrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cggqrf as cggqrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zggqrf as zggqrf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sggrqf as sggrqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dggrqf as dggrqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cggrqf as cggrqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zggrqf as zggrqf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgtsv as sgtsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgtsv as dgtsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgtsv as cgtsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgtsv as zgtsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sgttrf as sgttrf {fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dgttrf as dgttrf {fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cgttrf as cgttrf {fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zgttrf as zgttrf {fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sorghr as sorghr {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dorghr as dorghr {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sorglq as sorglq {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dorglq as dorglq {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sorgql as sorgql {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dorgql as dorgql {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sorgqr as sorgqr {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dorgqr as dorgqr {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sorgrq as sorgrq {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dorgrq as dorgrq {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_spoequ as spoequ {fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dpoequ as dpoequ {fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cpoequ as cpoequ {fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zpoequ as zpoequ {fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_spoequb as spoequb {fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dpoequb as dpoequb {fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cpoequb as cpoequb {fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zpoequb as zpoequb {fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sptcon as sptcon {fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dptcon as dptcon {fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cptcon as cptcon {fromIntegral `Int', id `Ptr CFloat', castComplexToPtr `Ptr (Complex CFloat)', id `CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zptcon as zptcon {fromIntegral `Int', id `Ptr CDouble', castZomplexToPtr `Ptr (Complex CDouble)', id `CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sptrfs as sptrfs {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dptrfs as dptrfs {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sptsv as sptsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dptsv as dptsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cptsv as cptsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zptsv as zptsv {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_spttrf as spttrf {fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dpttrf as dpttrf {fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cpttrf as cpttrf {fromIntegral `Int', id `Ptr CFloat', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zpttrf as zpttrf {fromIntegral `Int', id `Ptr CDouble', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_spttrs as spttrs {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dpttrs as dpttrs {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_sstein as sstein {fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CInt', id `Ptr CInt', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dstein as dstein {fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CInt', id `Ptr CInt', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cstein as cstein {fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CInt', id `Ptr CInt', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zstein as zstein {fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CInt', id `Ptr CInt', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_ssterf as ssterf {fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dsterf as dsterf {fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_stgexc as stgexc {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dtgexc as dtgexc {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt', id `Ptr CInt'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_ctgexc as ctgexc {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_ztgexc as ztgexc {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_stgsen as stgsen {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CInt', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CInt', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dtgsen as dtgsen {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CInt', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CInt', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_ctgsen as ctgsen {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CInt', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', id `Ptr CInt', id `Ptr CFloat', id `Ptr CFloat', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_ztgsen as ztgsen {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CInt', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', id `Ptr CInt', id `Ptr CDouble', id `Ptr CDouble', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_stzrzf as stzrzf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CFloat', fromIntegral `Int', id `Ptr CFloat'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_dtzrzf as dtzrzf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', id `Ptr CDouble', fromIntegral `Int', id `Ptr CDouble'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_ctzrzf as ctzrzf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_ztzrzf as ztzrzf {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cunghr as cunghr {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zunghr as zunghr {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cunglq as cunglq {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zunglq as zunglq {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cungql as cungql {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zungql as zungql {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cungqr as cungqr {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zungqr as zungqr {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_cungrq as cungrq {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)', fromIntegral `Int', castComplexToPtr `Ptr (Complex CFloat)'} -> `Int' fromIntegral #}
{# fun unsafe lapacke_zungrq as zungrq {fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)', fromIntegral `Int', castZomplexToPtr `Ptr (Complex CDouble)'} -> `Int' fromIntegral #}